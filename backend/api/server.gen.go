// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/oapi-codegen/runtime"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// health check
	// (GET /v3/)
	Get(c *gin.Context)
	// get categories
	// (GET /v3/categories)
	GetV3Categories(c *gin.Context)
	// get records
	// (GET /v3/record)
	GetV3Record(c *gin.Context, params GetV3RecordParams)
	// create record
	// (POST /v3/record)
	PostV3Record(c *gin.Context)
	// record available
	// (GET /v3/record/available)
	GetV3RecordAvailable(c *gin.Context)
	// record count
	// (GET /v3/record/count)
	GetV3RecordCount(c *gin.Context)
	// get year summary
	// (GET /v3/record/summary/{year})
	GetV3RecordYear(c *gin.Context, year int)
	// delete record from id
	// (DELETE /v3/record/{id})
	DeleteV3RecordId(c *gin.Context, id int)
	// get record from id
	// (GET /v3/record/{id})
	GetV3RecordId(c *gin.Context, id int)
	// get version
	// (GET /v3/version)
	GetV3Version(c *gin.Context)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandler       func(*gin.Context, error, int)
}

type MiddlewareFunc func(c *gin.Context)

// Get operation middleware
func (siw *ServerInterfaceWrapper) Get(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.Get(c)
}

// GetV3Categories operation middleware
func (siw *ServerInterfaceWrapper) GetV3Categories(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3Categories(c)
}

// GetV3Record operation middleware
func (siw *ServerInterfaceWrapper) GetV3Record(c *gin.Context) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetV3RecordParams

	// ------------- Optional query parameter "num" -------------

	err = runtime.BindQueryParameter("form", true, false, "num", c.Request.URL.Query(), &params.Num)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter num: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", c.Request.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter offset: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "yyyymm" -------------

	err = runtime.BindQueryParameter("form", true, false, "yyyymm", c.Request.URL.Query(), &params.Yyyymm)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter yyyymm: %w", err), http.StatusBadRequest)
		return
	}

	// ------------- Optional query parameter "category_id" -------------

	err = runtime.BindQueryParameter("form", true, false, "category_id", c.Request.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter category_id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3Record(c, params)
}

// PostV3Record operation middleware
func (siw *ServerInterfaceWrapper) PostV3Record(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.PostV3Record(c)
}

// GetV3RecordAvailable operation middleware
func (siw *ServerInterfaceWrapper) GetV3RecordAvailable(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3RecordAvailable(c)
}

// GetV3RecordCount operation middleware
func (siw *ServerInterfaceWrapper) GetV3RecordCount(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3RecordCount(c)
}

// GetV3RecordYear operation middleware
func (siw *ServerInterfaceWrapper) GetV3RecordYear(c *gin.Context) {

	var err error

	// ------------- Path parameter "year" -------------
	var year int

	err = runtime.BindStyledParameterWithOptions("simple", "year", c.Param("year"), &year, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter year: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3RecordYear(c, year)
}

// DeleteV3RecordId operation middleware
func (siw *ServerInterfaceWrapper) DeleteV3RecordId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.DeleteV3RecordId(c, id)
}

// GetV3RecordId operation middleware
func (siw *ServerInterfaceWrapper) GetV3RecordId(c *gin.Context) {

	var err error

	// ------------- Path parameter "id" -------------
	var id int

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Param("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandler(c, fmt.Errorf("Invalid format for parameter id: %w", err), http.StatusBadRequest)
		return
	}

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3RecordId(c, id)
}

// GetV3Version operation middleware
func (siw *ServerInterfaceWrapper) GetV3Version(c *gin.Context) {

	for _, middleware := range siw.HandlerMiddlewares {
		middleware(c)
		if c.IsAborted() {
			return
		}
	}

	siw.Handler.GetV3Version(c)
}

// GinServerOptions provides options for the Gin server.
type GinServerOptions struct {
	BaseURL      string
	Middlewares  []MiddlewareFunc
	ErrorHandler func(*gin.Context, error, int)
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router gin.IRouter, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, GinServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router gin.IRouter, si ServerInterface, options GinServerOptions) {
	errorHandler := options.ErrorHandler
	if errorHandler == nil {
		errorHandler = func(c *gin.Context, err error, statusCode int) {
			c.JSON(statusCode, gin.H{"msg": err.Error()})
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandler:       errorHandler,
	}

	router.GET(options.BaseURL+"/v3/", wrapper.Get)
	router.GET(options.BaseURL+"/v3/categories", wrapper.GetV3Categories)
	router.GET(options.BaseURL+"/v3/record", wrapper.GetV3Record)
	router.POST(options.BaseURL+"/v3/record", wrapper.PostV3Record)
	router.GET(options.BaseURL+"/v3/record/available", wrapper.GetV3RecordAvailable)
	router.GET(options.BaseURL+"/v3/record/count", wrapper.GetV3RecordCount)
	router.GET(options.BaseURL+"/v3/record/summary/:year", wrapper.GetV3RecordYear)
	router.DELETE(options.BaseURL+"/v3/record/:id", wrapper.DeleteV3RecordId)
	router.GET(options.BaseURL+"/v3/record/:id", wrapper.GetV3RecordId)
	router.GET(options.BaseURL+"/v3/version", wrapper.GetV3Version)
}
